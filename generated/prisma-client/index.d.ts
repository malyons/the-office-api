// Code generated by Prisma (prisma@1.23.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  episode: (where?: EpisodeWhereInput) => Promise<boolean>;
  location: (where?: LocationWhereInput) => Promise<boolean>;
  season: (where?: SeasonWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  episode: (where: EpisodeWhereUniqueInput) => EpisodePromise;
  episodes: (
    args?: {
      where?: EpisodeWhereInput;
      orderBy?: EpisodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Episode>;
  episodesConnection: (
    args?: {
      where?: EpisodeWhereInput;
      orderBy?: EpisodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => EpisodeConnectionPromise;
  location: (where: LocationWhereUniqueInput) => LocationPromise;
  locations: (
    args?: {
      where?: LocationWhereInput;
      orderBy?: LocationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Location>;
  locationsConnection: (
    args?: {
      where?: LocationWhereInput;
      orderBy?: LocationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => LocationConnectionPromise;
  season: (where: SeasonWhereUniqueInput) => SeasonPromise;
  seasons: (
    args?: {
      where?: SeasonWhereInput;
      orderBy?: SeasonOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Season>;
  seasonsConnection: (
    args?: {
      where?: SeasonWhereInput;
      orderBy?: SeasonOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SeasonConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createEpisode: (data: EpisodeCreateInput) => EpisodePromise;
  updateEpisode: (
    args: { data: EpisodeUpdateInput; where: EpisodeWhereUniqueInput }
  ) => EpisodePromise;
  updateManyEpisodes: (
    args: { data: EpisodeUpdateManyMutationInput; where?: EpisodeWhereInput }
  ) => BatchPayloadPromise;
  upsertEpisode: (
    args: {
      where: EpisodeWhereUniqueInput;
      create: EpisodeCreateInput;
      update: EpisodeUpdateInput;
    }
  ) => EpisodePromise;
  deleteEpisode: (where: EpisodeWhereUniqueInput) => EpisodePromise;
  deleteManyEpisodes: (where?: EpisodeWhereInput) => BatchPayloadPromise;
  createLocation: (data: LocationCreateInput) => LocationPromise;
  updateLocation: (
    args: { data: LocationUpdateInput; where: LocationWhereUniqueInput }
  ) => LocationPromise;
  updateManyLocations: (
    args: { data: LocationUpdateManyMutationInput; where?: LocationWhereInput }
  ) => BatchPayloadPromise;
  upsertLocation: (
    args: {
      where: LocationWhereUniqueInput;
      create: LocationCreateInput;
      update: LocationUpdateInput;
    }
  ) => LocationPromise;
  deleteLocation: (where: LocationWhereUniqueInput) => LocationPromise;
  deleteManyLocations: (where?: LocationWhereInput) => BatchPayloadPromise;
  createSeason: (data: SeasonCreateInput) => SeasonPromise;
  updateSeason: (
    args: { data: SeasonUpdateInput; where: SeasonWhereUniqueInput }
  ) => SeasonPromise;
  updateManySeasons: (
    args: { data: SeasonUpdateManyMutationInput; where?: SeasonWhereInput }
  ) => BatchPayloadPromise;
  upsertSeason: (
    args: {
      where: SeasonWhereUniqueInput;
      create: SeasonCreateInput;
      update: SeasonUpdateInput;
    }
  ) => SeasonPromise;
  deleteSeason: (where: SeasonWhereUniqueInput) => SeasonPromise;
  deleteManySeasons: (where?: SeasonWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  episode: (
    where?: EpisodeSubscriptionWhereInput
  ) => EpisodeSubscriptionPayloadSubscription;
  location: (
    where?: LocationSubscriptionWhereInput
  ) => LocationSubscriptionPayloadSubscription;
  season: (
    where?: SeasonSubscriptionWhereInput
  ) => SeasonSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type EpisodeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "year_ASC"
  | "year_DESC"
  | "summary_ASC"
  | "summary_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SeasonOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "year_ASC"
  | "year_DESC"
  | "summary_ASC"
  | "summary_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type LocationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface SeasonCreateInput {
  title: String;
  year: Int;
  summary: String;
}

export type EpisodeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface SeasonUpdateDataInput {
  title?: String;
  year?: Int;
  summary?: String;
}

export interface EpisodeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  year?: Int;
  year_not?: Int;
  year_in?: Int[] | Int;
  year_not_in?: Int[] | Int;
  year_lt?: Int;
  year_lte?: Int;
  year_gt?: Int;
  year_gte?: Int;
  season?: SeasonWhereInput;
  summary?: String;
  summary_not?: String;
  summary_in?: String[] | String;
  summary_not_in?: String[] | String;
  summary_lt?: String;
  summary_lte?: String;
  summary_gt?: String;
  summary_gte?: String;
  summary_contains?: String;
  summary_not_contains?: String;
  summary_starts_with?: String;
  summary_not_starts_with?: String;
  summary_ends_with?: String;
  summary_not_ends_with?: String;
  AND?: EpisodeWhereInput[] | EpisodeWhereInput;
  OR?: EpisodeWhereInput[] | EpisodeWhereInput;
  NOT?: EpisodeWhereInput[] | EpisodeWhereInput;
}

export type SeasonWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface EpisodeUpdateManyMutationInput {
  title?: String;
  year?: Int;
  summary?: String;
}

export interface SeasonUpdateWithWhereUniqueNestedInput {
  where: SeasonWhereUniqueInput;
  data: SeasonUpdateDataInput;
}

export interface SeasonUpsertNestedInput {
  update: SeasonUpdateDataInput;
  create: SeasonCreateInput;
}

export interface SeasonUpdateManyInput {
  create?: SeasonCreateInput[] | SeasonCreateInput;
  update?:
    | SeasonUpdateWithWhereUniqueNestedInput[]
    | SeasonUpdateWithWhereUniqueNestedInput;
  upsert?:
    | SeasonUpsertWithWhereUniqueNestedInput[]
    | SeasonUpsertWithWhereUniqueNestedInput;
  delete?: SeasonWhereUniqueInput[] | SeasonWhereUniqueInput;
  connect?: SeasonWhereUniqueInput[] | SeasonWhereUniqueInput;
  disconnect?: SeasonWhereUniqueInput[] | SeasonWhereUniqueInput;
  deleteMany?: SeasonScalarWhereInput[] | SeasonScalarWhereInput;
  updateMany?:
    | SeasonUpdateManyWithWhereNestedInput[]
    | SeasonUpdateManyWithWhereNestedInput;
}

export interface LocationSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LocationWhereInput;
  AND?: LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput;
  OR?: LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput;
  NOT?: LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput;
}

export interface LocationUpdateInput {
  name?: String;
  description?: String;
  season?: SeasonUpdateManyInput;
}

export interface SeasonUpdateManyMutationInput {
  title?: String;
  year?: Int;
  summary?: String;
}

export interface SeasonUpdateInput {
  title?: String;
  year?: Int;
  summary?: String;
}

export interface LocationWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  season_every?: SeasonWhereInput;
  season_some?: SeasonWhereInput;
  season_none?: SeasonWhereInput;
  AND?: LocationWhereInput[] | LocationWhereInput;
  OR?: LocationWhereInput[] | LocationWhereInput;
  NOT?: LocationWhereInput[] | LocationWhereInput;
}

export interface EpisodeCreateInput {
  title: String;
  year: Int;
  season: SeasonCreateOneInput;
  summary: String;
}

export interface SeasonUpdateManyWithWhereNestedInput {
  where: SeasonScalarWhereInput;
  data: SeasonUpdateManyDataInput;
}

export interface SeasonCreateOneInput {
  create?: SeasonCreateInput;
  connect?: SeasonWhereUniqueInput;
}

export interface SeasonUpsertWithWhereUniqueNestedInput {
  where: SeasonWhereUniqueInput;
  update: SeasonUpdateDataInput;
  create: SeasonCreateInput;
}

export interface SeasonCreateManyInput {
  create?: SeasonCreateInput[] | SeasonCreateInput;
  connect?: SeasonWhereUniqueInput[] | SeasonWhereUniqueInput;
}

export interface EpisodeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: EpisodeWhereInput;
  AND?: EpisodeSubscriptionWhereInput[] | EpisodeSubscriptionWhereInput;
  OR?: EpisodeSubscriptionWhereInput[] | EpisodeSubscriptionWhereInput;
  NOT?: EpisodeSubscriptionWhereInput[] | EpisodeSubscriptionWhereInput;
}

export interface LocationCreateInput {
  name: String;
  description: String;
  season?: SeasonCreateManyInput;
}

export interface SeasonWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  year?: Int;
  year_not?: Int;
  year_in?: Int[] | Int;
  year_not_in?: Int[] | Int;
  year_lt?: Int;
  year_lte?: Int;
  year_gt?: Int;
  year_gte?: Int;
  summary?: String;
  summary_not?: String;
  summary_in?: String[] | String;
  summary_not_in?: String[] | String;
  summary_lt?: String;
  summary_lte?: String;
  summary_gt?: String;
  summary_gte?: String;
  summary_contains?: String;
  summary_not_contains?: String;
  summary_starts_with?: String;
  summary_not_starts_with?: String;
  summary_ends_with?: String;
  summary_not_ends_with?: String;
  AND?: SeasonWhereInput[] | SeasonWhereInput;
  OR?: SeasonWhereInput[] | SeasonWhereInput;
  NOT?: SeasonWhereInput[] | SeasonWhereInput;
}

export interface SeasonUpdateOneRequiredInput {
  create?: SeasonCreateInput;
  update?: SeasonUpdateDataInput;
  upsert?: SeasonUpsertNestedInput;
  connect?: SeasonWhereUniqueInput;
}

export interface EpisodeUpdateInput {
  title?: String;
  year?: Int;
  season?: SeasonUpdateOneRequiredInput;
  summary?: String;
}

export type LocationWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface SeasonSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SeasonWhereInput;
  AND?: SeasonSubscriptionWhereInput[] | SeasonSubscriptionWhereInput;
  OR?: SeasonSubscriptionWhereInput[] | SeasonSubscriptionWhereInput;
  NOT?: SeasonSubscriptionWhereInput[] | SeasonSubscriptionWhereInput;
}

export interface SeasonScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  year?: Int;
  year_not?: Int;
  year_in?: Int[] | Int;
  year_not_in?: Int[] | Int;
  year_lt?: Int;
  year_lte?: Int;
  year_gt?: Int;
  year_gte?: Int;
  summary?: String;
  summary_not?: String;
  summary_in?: String[] | String;
  summary_not_in?: String[] | String;
  summary_lt?: String;
  summary_lte?: String;
  summary_gt?: String;
  summary_gte?: String;
  summary_contains?: String;
  summary_not_contains?: String;
  summary_starts_with?: String;
  summary_not_starts_with?: String;
  summary_ends_with?: String;
  summary_not_ends_with?: String;
  AND?: SeasonScalarWhereInput[] | SeasonScalarWhereInput;
  OR?: SeasonScalarWhereInput[] | SeasonScalarWhereInput;
  NOT?: SeasonScalarWhereInput[] | SeasonScalarWhereInput;
}

export interface SeasonUpdateManyDataInput {
  title?: String;
  year?: Int;
  summary?: String;
}

export interface LocationUpdateManyMutationInput {
  name?: String;
  description?: String;
}

export interface NodeNode {
  id: ID_Output;
}

export interface SeasonPreviousValues {
  id: ID_Output;
  title: String;
  year: Int;
  summary: String;
}

export interface SeasonPreviousValuesPromise
  extends Promise<SeasonPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  year: () => Promise<Int>;
  summary: () => Promise<String>;
}

export interface SeasonPreviousValuesSubscription
  extends Promise<AsyncIterator<SeasonPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  year: () => Promise<AsyncIterator<Int>>;
  summary: () => Promise<AsyncIterator<String>>;
}

export interface Location {
  id: ID_Output;
  name: String;
  description: String;
}

export interface LocationPromise extends Promise<Location>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  season: <T = FragmentableArray<Season>>(
    args?: {
      where?: SeasonWhereInput;
      orderBy?: SeasonOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface LocationSubscription
  extends Promise<AsyncIterator<Location>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  season: <T = Promise<AsyncIterator<SeasonSubscription>>>(
    args?: {
      where?: SeasonWhereInput;
      orderBy?: SeasonOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Season {
  id: ID_Output;
  title: String;
  year: Int;
  summary: String;
}

export interface SeasonPromise extends Promise<Season>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  year: () => Promise<Int>;
  summary: () => Promise<String>;
}

export interface SeasonSubscription
  extends Promise<AsyncIterator<Season>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  year: () => Promise<AsyncIterator<Int>>;
  summary: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEpisode {
  count: Int;
}

export interface AggregateEpisodePromise
  extends Promise<AggregateEpisode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEpisodeSubscription
  extends Promise<AsyncIterator<AggregateEpisode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface EpisodeEdge {
  node: Episode;
  cursor: String;
}

export interface EpisodeEdgePromise extends Promise<EpisodeEdge>, Fragmentable {
  node: <T = EpisodePromise>() => T;
  cursor: () => Promise<String>;
}

export interface EpisodeEdgeSubscription
  extends Promise<AsyncIterator<EpisodeEdge>>,
    Fragmentable {
  node: <T = EpisodeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface EpisodeConnection {
  pageInfo: PageInfo;
  edges: EpisodeEdge[];
}

export interface EpisodeConnectionPromise
  extends Promise<EpisodeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EpisodeEdge>>() => T;
  aggregate: <T = AggregateEpisodePromise>() => T;
}

export interface EpisodeConnectionSubscription
  extends Promise<AsyncIterator<EpisodeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EpisodeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEpisodeSubscription>() => T;
}

export interface Episode {
  id: ID_Output;
  title: String;
  year: Int;
  summary: String;
}

export interface EpisodePromise extends Promise<Episode>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  year: () => Promise<Int>;
  season: <T = SeasonPromise>() => T;
  summary: () => Promise<String>;
}

export interface EpisodeSubscription
  extends Promise<AsyncIterator<Episode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  year: () => Promise<AsyncIterator<Int>>;
  season: <T = SeasonSubscription>() => T;
  summary: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSeason {
  count: Int;
}

export interface AggregateSeasonPromise
  extends Promise<AggregateSeason>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSeasonSubscription
  extends Promise<AsyncIterator<AggregateSeason>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EpisodeSubscriptionPayload {
  mutation: MutationType;
  node: Episode;
  updatedFields: String[];
  previousValues: EpisodePreviousValues;
}

export interface EpisodeSubscriptionPayloadPromise
  extends Promise<EpisodeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EpisodePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EpisodePreviousValuesPromise>() => T;
}

export interface EpisodeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EpisodeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EpisodeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EpisodePreviousValuesSubscription>() => T;
}

export interface SeasonConnection {
  pageInfo: PageInfo;
  edges: SeasonEdge[];
}

export interface SeasonConnectionPromise
  extends Promise<SeasonConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SeasonEdge>>() => T;
  aggregate: <T = AggregateSeasonPromise>() => T;
}

export interface SeasonConnectionSubscription
  extends Promise<AsyncIterator<SeasonConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SeasonEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSeasonSubscription>() => T;
}

export interface EpisodePreviousValues {
  id: ID_Output;
  title: String;
  year: Int;
  summary: String;
}

export interface EpisodePreviousValuesPromise
  extends Promise<EpisodePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  year: () => Promise<Int>;
  summary: () => Promise<String>;
}

export interface EpisodePreviousValuesSubscription
  extends Promise<AsyncIterator<EpisodePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  year: () => Promise<AsyncIterator<Int>>;
  summary: () => Promise<AsyncIterator<String>>;
}

export interface LocationEdge {
  node: Location;
  cursor: String;
}

export interface LocationEdgePromise
  extends Promise<LocationEdge>,
    Fragmentable {
  node: <T = LocationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LocationEdgeSubscription
  extends Promise<AsyncIterator<LocationEdge>>,
    Fragmentable {
  node: <T = LocationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LocationPreviousValues {
  id: ID_Output;
  name: String;
  description: String;
}

export interface LocationPreviousValuesPromise
  extends Promise<LocationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
}

export interface LocationPreviousValuesSubscription
  extends Promise<AsyncIterator<LocationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface LocationSubscriptionPayload {
  mutation: MutationType;
  node: Location;
  updatedFields: String[];
  previousValues: LocationPreviousValues;
}

export interface LocationSubscriptionPayloadPromise
  extends Promise<LocationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LocationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LocationPreviousValuesPromise>() => T;
}

export interface LocationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LocationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LocationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LocationPreviousValuesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface SeasonSubscriptionPayload {
  mutation: MutationType;
  node: Season;
  updatedFields: String[];
  previousValues: SeasonPreviousValues;
}

export interface SeasonSubscriptionPayloadPromise
  extends Promise<SeasonSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SeasonPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SeasonPreviousValuesPromise>() => T;
}

export interface SeasonSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SeasonSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SeasonSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SeasonPreviousValuesSubscription>() => T;
}

export interface LocationConnection {
  pageInfo: PageInfo;
  edges: LocationEdge[];
}

export interface LocationConnectionPromise
  extends Promise<LocationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LocationEdge>>() => T;
  aggregate: <T = AggregateLocationPromise>() => T;
}

export interface LocationConnectionSubscription
  extends Promise<AsyncIterator<LocationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LocationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLocationSubscription>() => T;
}

export interface AggregateLocation {
  count: Int;
}

export interface AggregateLocationPromise
  extends Promise<AggregateLocation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLocationSubscription
  extends Promise<AsyncIterator<AggregateLocation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SeasonEdge {
  node: Season;
  cursor: String;
}

export interface SeasonEdgePromise extends Promise<SeasonEdge>, Fragmentable {
  node: <T = SeasonPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SeasonEdgeSubscription
  extends Promise<AsyncIterator<SeasonEdge>>,
    Fragmentable {
  node: <T = SeasonSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Episode",
    embedded: false
  },
  {
    name: "Location",
    embedded: false
  },
  {
    name: "Season",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
